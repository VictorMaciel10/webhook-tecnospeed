from flask import Flask, request, jsonify
from datetime import datetime
import json
import os
import requests

app = Flask(__name__)

# CONFIGURA√á√ïES PLUGZAPI
PLUGZ_API_URL = "https://api.plugzapi.com.br/instances/3C0D21B917DCB0A98E224689DEFE84AF/token/4FB6B468AB4F478D13FC0070/send-text"
TELEFONE_DESTINO = "5511971102724"  # N√∫mero de WhatsApp sem espa√ßos ou s√≠mbolos

# TOKEN DE SEGURAN√áA enviado no header "Client-Token" pelo webhook da Tecnospeed
CLIENT_TOKEN_HEADER = "Fc0dd5429e2674e2e9cea2c0b5b29d000S"

# Fun√ß√£o para salvar os dados recebidos localmente
def salvar_log(dados):
    with open("log_webhook.txt", "a", encoding="utf-8") as f:
        f.write(f"{datetime.now()} - Dados recebidos:\n")
        f.write(json.dumps(dados, ensure_ascii=False, indent=2))
        f.write("\n\n")

# Fun√ß√£o para enviar mensagem via PlugzAPI
def enviar_whatsapp(mensagem):
    if not mensagem:
        print("‚ùå Mensagem vazia. Abortando envio.")
        return False

    if not TELEFONE_DESTINO or TELEFONE_DESTINO.strip() == "":
        print("‚ùå N√∫mero de telefone est√° vazio. Abortando envio.")
        return False

    payload = {
        "phone": TELEFONE_DESTINO,     # üîë CAMPO CORRETO segundo a documenta√ß√£o PlugzAPI
        "message": mensagem            # üîë CAMPO CORRETO segundo a documenta√ß√£o PlugzAPI
    }

    headers = {
        "Content-Type": "application/json"
        # ‚ùå N√ÉO incluir Client-Token aqui ‚Äî ele j√° est√° embutido na URL da inst√¢ncia/token
    }

    try:
        resposta = requests.post(PLUGZ_API_URL, headers=headers, json=payload)
        print(f"‚úÖ Mensagem enviada ao WhatsApp. Status: {resposta.status_code}")
        print("üßæ Resposta da PlugzAPI:", resposta.text)
        return resposta.status_code == 200
    except Exception as e:
        print(f"‚ùå Erro ao enviar mensagem pelo PlugzAPI: {e}")
        return False

# Endpoint GET para testes
@app.route("/webhook", methods=["GET"])
def webhook_info():
    return jsonify({
        "mensagem": "Este endpoint √© um webhook e aceita apenas requisi√ß√µes POST com JSON."
    }), 200

# Endpoint principal que recebe os eventos do Webhook
@app.route("/webhook", methods=["POST"])
def receber_webhook():
    try:
        # Valida o token de seguran√ßa enviado pela Tecnospeed no header
        token_recebido = request.headers.get("Client-Token")
        if token_recebido != CLIENT_TOKEN_HEADER:
            print(f"‚ùå Token inv√°lido recebido: {token_recebido}")
            return jsonify({"erro": "Token de seguran√ßa inv√°lido"}), 403

        # Tenta obter os dados JSON da requisi√ß√£o
        dados = request.get_json(silent=True)
        if not dados:
            print("‚ö†Ô∏è Webhook recebido com corpo vazio ou JSON inv√°lido.")
            return jsonify({
                "erro": "Corpo vazio ou JSON inv√°lido",
                "dados": {}
            }), 400

        print("üì® Webhook recebido da Tecnospeed:")
        print(json.dumps(dados, indent=2, ensure_ascii=False))
        salvar_log(dados)

        # Monta a mensagem a ser enviada no WhatsApp
        mensagem = f"üì¨ Notifica√ß√£o recebida da Tecnospeed:\n\n{json.dumps(dados, indent=2, ensure_ascii=False)}"
        enviar_whatsapp(mensagem)

        return jsonify({
            "mensagem": "Recebido com sucesso",
            "dados": {}
        }), 200

    except Exception as e:
        print(f"‚ùå Erro ao processar webhook: {e}")
        return jsonify({
            "erro": "Falha ao processar",
            "dados": {}
        }), 400

# Inicializa o app Flask
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)